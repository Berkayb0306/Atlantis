import axiosInstance from "../../utils/axiosInstance";

// Aksiyon t√ºrleri
export const SET_CATEGORIES = "SET_CATEGORIES";
export const SET_PRODUCTS = "SET_PRODUCTS";
export const SET_TOTAL = "SET_TOTAL";
export const SET_FETCH_STATE = "SET_FETCH_STATE";

// **Kategorileri Redux Store'a kaydet**
export const setCategories = (categories) => ({
  type: SET_CATEGORIES,
  payload: categories ?? [],
});

// **√úr√ºnleri Redux Store'a kaydet**
export const setProducts = (products) => ({
  type: SET_PRODUCTS,
  payload: products ?? [],
});

// **Toplam √ºr√ºn sayƒ±sƒ±nƒ± Redux Store'a kaydet**
export const setTotal = (total) => ({
  type: SET_TOTAL,
  payload: total ?? 0,
});

// **Fetch durumunu g√ºncelle**
export const setFetchState = (fetchState) => ({
  type: SET_FETCH_STATE,
  payload: fetchState,
});

// **API'den veri √ßekme fonksiyonu**
const fetchData = async (endpoint) => {
  try {
    const response = await axiosInstance.get(endpoint);
    if (!response?.data || response.status !== 200) {
      throw new Error(`API hatasƒ±: ${endpoint} verisi alƒ±namadƒ±.`);
    }
    return response.data;
  } catch (error) {
    console.error(`‚ùå ${endpoint} y√ºklenirken hata olu≈ütu:`, error);
    throw error;
  }
};

// **Kategorileri API'den √ßekmek i√ßin Thunk Action**
export const fetchCategories = () => async (dispatch) => {
  dispatch(setFetchState("FETCHING"));

  try {
    const data = await fetchData("/categories");

    if (!Array.isArray(data) || data.length === 0) {
      throw new Error("Kategori listesi bo≈ü.");
    }

    dispatch(setCategories(data));
    dispatch(setFetchState("FETCHED"));
    console.log("‚úÖ Kategoriler ba≈üarƒ±yla y√ºklendi:", data);
  } catch (error) {
    dispatch(setFetchState("FAILED"));
  }
};

// **√úr√ºnleri temizleme fonksiyonu**
const cleanProductData = (products) => {
  return products.map((product, index) => {
    console.log("üìå API'den gelen √ºr√ºn:", product); // API verisini kontrol et

    return {
      id: product.id ?? index,
      title:
        product.title?.trim() ||
        product.name?.trim() ||
        product.description?.slice(0, 30) ||
        "√úr√ºn Ba≈ülƒ±ƒüƒ± Mevcut Deƒüil",
      image:
        product.image?.url || // ‚úÖ Eƒüer `image.url` varsa onu kullan
        (product.images?.length > 0 ? product.images[0].url : null) || // ‚úÖ `images` array'i varsa ilk elemanƒ±n `url`'√ºn√º al
        product.thumbnail || // ‚úÖ Thumbnail varsa onu kullan
        "https://via.placeholder.com/150", // ‚õî G√∂rsel yoksa placeholder kullan
      price: product.price ?? 0,
      description: product.description || "A√ßƒ±klama mevcut deƒüil.",
      category: product.category || "Bilinmeyen Kategori",
    };
  });
};

// **√úr√ºnleri API'den √ßekmek i√ßin Thunk Action**
export const fetchProducts = () => async (dispatch) => {
  dispatch(setFetchState("FETCHING"));

  try {
    const data = await fetchData("/products");

    if (!data?.products || !Array.isArray(data.products)) {
      throw new Error("API'den gelen √ºr√ºn verisi hatalƒ±.");
    }

    const productsData = cleanProductData(data.products);
    const totalProducts = data.total ?? productsData.length;

    if (productsData.length === 0) {
      throw new Error("√úr√ºn listesi bo≈ü.");
    }

    dispatch(setProducts(productsData));
    dispatch(setTotal(totalProducts));
    dispatch(setFetchState("FETCHED"));

    console.log("‚úÖ √úr√ºnler ba≈üarƒ±yla y√ºklendi:", productsData);
  } catch (error) {
    dispatch(setFetchState("FAILED"));
  }
};
